/*----------------------------------------------------------------------------*/
/*
 * Copyright (C) Bosch Connected Devices and Solutions GmbH. 
 * All Rights Reserved. Confidential.
 *
 * Distribution only to people who need to know this information in
 * order to do their job.(Need-to-know principle).
 * Distribution to persons outside the company, only if these persons
 * signed a non-disclosure agreement.
 * Electronic transmission, e.g. via electronic mail, must be made in
 * encrypted form.
 */
/*----------------------------------------------------------------------------*/

/**
 *  @ingroup  BCDS_HAL_BSP_IF
 *
 *  @defgroup BCDS_HAL_BSP_Button Button
 *
 *  @{
 *  @brief Hardware abstraction layer for the buttons peripherals
 *
 *  @details The BSP is entirely responsible of providing the complete functionality of
 *  the on board buttons and to report the occurring events to the higher level
 *  through callbacks.
 *
 *  The application shall provide the callback used to process those events.
 *  @file
 */

#ifndef BCDS_BSP_Button_H
#define BCDS_BSP_Button_H

#include "BCDS_HAL.h"

/* Code is only effective if feature is enabled in configuration */
#if BCDS_FEATURE_BSP_BUTTON

enum Retcode_BSP_Button_E
{
    /** Start of BSP Button return codes */
    RETCODE_BSP_BUTTON_ENABLED = RETCODE_FIRST_CUSTOM_CODE,
    RETCODE_BSP_BUTTON_INTERRUPT_BUSY,
    RETCODE_BSP_BUTTON_INTERRUPT_CONFIGURED,
    /** Put new declarations of component return codes here */
};

/**
 * @brief: Type definition for the button callback
 * @details: This callback is necessary in case the buttons are associated to
 * interrupts it makes it possible for the application to react on button events.
 *
 * The application developer needs to know which events are generated by the
 * button module implementation and to provide, during the enable phase, the function which processes
 * those events.
 */
typedef void (*BSP_Button_Callback_T)(uint32_t);

/**
 * @brief maps the GPIO pins to their desired function
 * @details This function once called will map the GPIOpPins to their desired
 * functions to drive the on board buttons.
 */
Retcode_T BSP_Button_Connect(void);

/**
 * @brief Enables the events generated by the button.
 * @details This function once called will allow the button events to be
 * processed by the MCU. It associates the callback to the button
 * so that the callback will be executed each time a button event occurs
 * @param buttonId: identifier of the button  to be enabled.
 * @param callback: the function that processes the events genarated by the
 * specified button
 *
 * @retval RETCODE_OK in the case of success or an error code otherwise.
 */

Retcode_T BSP_Button_Enable( uint32_t buttonId, BSP_Button_Callback_T callback);

/**
 * @brief Disables the the specified button.
 * @details This function once called will disable the button and prevent the
 * MCU from processing events related to it.
 * @param buttonId: identifer of the button to be disabled.
 *
 * @retval RETCODE_OK in the case of success or an error code otherwise.
 */
Retcode_T BSP_Button_Disable(uint32_t buttonId );

/**
 * @brief Disconnects the buttons
 * @details This function disconnects the GPIOs that are used for
 * the buttons from the MCU and puts then into low power consumption mode.
 *
 * @retval RETCODE_OK in the case of success or an error code otherwise.
 */
Retcode_T BSP_Button_Disconnect(void);

/**
 * @brief Returns the current state of the button
 * @details This function assesses the input pin of the button and returns its
 * state pressed or released.
 * @param buttonId : button identifier.
 *
 * @return State of the button 0 for error, 1 for pressed, 2 for released.
 */
uint32_t BSP_Button_GetState(uint32_t buttonId);

#endif /* BCDS_FEATURE_BSP_BUTTON */

#endif /* BCDS_BSP_Button_H */

/**  @} */
